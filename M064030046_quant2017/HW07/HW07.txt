def initialize(context):

     # 投組
     context.securities = [sid(24), sid(351), sid(39840)]

     # 設定
     schedule_function(rebalance, date_rule=date_rules.every_day())

def rebalance(context, data):

    for stock in context.securities:
        #設定價
        price_history = data.history(
            stock,
            fields='price',
            bar_count=20,
            frequency='1d'
        )
        # 設定量
        volume_history = data.history(
            stock,
            fields='volume',
            bar_count=20,
            frequency='1d'
        )
        # 計算均價與均量
        average_price = price_history.mean()
        average_volume = volume_history.mean()
        
        current_price = data.current(stock, 'price')
        current_volume = data.current(stock, 'volume') 
        # 設定進出場策略
        if data.can_trade(stock):
            if current_price > (1.02 * average_price):
                order_target_percent(stock, 1)
                log.info("Buying %s" % (stock.symbol))

            elif current_price < average_price:
                order_target_percent(stock, 0)
                log.info("Selling %s" % (stock.symbol))

            if current_volume > (1.02 *average_volume):
                order_target_percent(stock, 1)
                log.info("Buying %s" % (stock.symbol))

            elif current_volume < average_volume:
                order_target_percent(stock, 0)
                log.info("Selling %s" % (stock.symbol))
                # 結果
    record(current_price=current_price, average_price=average_price)
    record(current_volume=current_volume, average_volume=average_volume) 